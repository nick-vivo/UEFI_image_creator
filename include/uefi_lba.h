#ifndef __UEFI_SPEC_2_10__LBA_H__
#define __UEFI_SPEC_2_10__LBA_H__

#include <stdio.h>
#include <stdint.h>

#include <config.h>

// ==========
// Functions
// ==========

/**
 * @brief Конвертировать количество байт в количество блоков данных, при необходимости дополнить.
 *
 * @param bytes Количество байт, которое будет конвертировано.
 * @return Количество блоков LBA.
 */
inline uint64_t bytesToLBAs(const uint64_t bytes)
{
    return (bytes / lbaSize) + (bytes % lbaSize > 0 ? 1 : 0);
}

/**
 * @brief Записывает нулевые байты до конца LBA в файл образа.
 *
 * @param image Указатель на файл образа, в который будут записаны нулевые байты.
 *
 * @note  Функция заполняет оставшееся пространство до конца LBA нулевыми байтами.
 * Используется для инициализации или очистки области диска.
 * Внутри функции создаётся массив из 512 нулевых байтов, который записывается в файл 
 * с помощью функции fwrite в цикле, пока не будет достигнут размер LBA.
 *
 * @note Перед вызовом этой функции необходимо открыть файл образа для записи.
 */
void writeFullLBASize(FILE *image);

/**
 * @brief Получает следующее наибольшее значение LBA, выровненное по заданному значению.
 *
 * @param LBA Входное значение логического блока адресации (LBA).
 * @return Следующее наибольшее значение LBA, выровненное по значению `alignLBA`.
 *
 * @note Функция рассчитывает следующее значение LBA, которое выровнено по границе, определённой значением `alignLBA`.
 * Это полезно для обеспечения правильного выравнивания разделов на диске, что может улучшить производительность
 * и совместимость с различными файловыми системами и устройствами хранения данных.
 *
 * @note Значение `alignLBA` должно быть инициализировано перед вызовом этой функции.
 */
inline uint64_t nextAlignedLBA(const uint64_t LBA)
{
    return LBA - (LBA % alignLBA) + alignLBA;
}

#endif